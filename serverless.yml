service: product-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

  environment:
    PRODUCTS: products
    STOCK: stock
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
  
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: "S3:ListBucket"
          Resource: 
            - "arn:aws:s3:::chg-import-service-dev"
        - Effect: "Allow"
          Action: "S3:*"
          Resource: 
            - "arn:aws:s3:::chg-import-service-dev/*"
        - Effect: "Allow"
          Action: "dynamodb:*"
          Resource: 
            - "arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/products"
            - "arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/stock"
        - Effect: "Allow"
          Action: "sqs:SendMessage"
          Resource: ${self:custom.arnCatalogBatchQueue}

package:
  exclude:
    - ./node_modules

custom:
  s3BucketName: chg-import-service-dev
  accountId: ""
  arnCatalogBatchQueue: arn:aws:sqs:us-east-1:${self:custom.accountId}:catalog-batch-process-queue

functions:
  getProductsList:
    handler: src/product-service/functions/getProductsList.handler
    events:
      - http:
          path: products
          method: get
  getProductsById:
    handler: src/product-service/functions/getProductsById.handler
    events:
      - http:
          path: /products/{productId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
  createProduct:
    handler: src/product-service/functions/createProduct.handler
    events:
      - http:
          path: /products
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
  importProductsFile:
    handler: src/import-service/functions/importProductsFile.handler
    events:
      - http:
          path: /import
          method: get
          cors: true
  importFileParser:
    handler: src/import-service/functions/importFileParser.handler
    events:
      - s3:
          bucket: ${self:custom.s3BucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true

resources:
   Resources:
    GatewayResponseDefault4XX:
       Type: 'AWS::ApiGateway::GatewayResponse'
       Properties:
         ResponseParameters:
           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
         ResponseType: DEFAULT_4XX
         RestApiId:
           Ref: 'ApiGatewayRestApi'
    S3BucketAssets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
    S3BucketAssetsAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3BucketAssets
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
              Resource: "arn:aws:s3:::${self:custom.s3BucketName}/*"
              Principal: '*'
